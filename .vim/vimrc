scriptencoding utf-8

"plugins (START)
" vim-plug initilaization {{{
if has("win32")
   let s:dotvim = '~/vimfiles'
else
   let s:dotvim = '~/.vim'
endif   
let s:plug_file = s:dotvim . '/autoload/plug.vim'
if !filereadable(expand(s:plug_file))
   silent execute '!curl -fLo' s:plug_file '--create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
endif
" }}}

call plug#begin(s:dotvim . '/plugged')

Plug 'morhetz/gruvbox'
Plug 'udalov/javap-vim'
Plug 'terryma/vim-multiple-cursors'

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'

Plug 'scrooloose/nerdtree'
Plug 'xuhdev/vim-latex-live-preview'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'itchyny/lightline.vim'
Plug 'shinchu/lightline-gruvbox.vim'
let g:lightline = {  
      \ 'colorscheme': 'gruvbox', 
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'relativepath', 'modified' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ ],
      \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ }
      \ }
      
call plug#end()
"plugins (END)

set nocompatible               " убираем совместимость с Vi
set nu!                        " нумерация строк
set backspace=indent,eol,start " baсkspace обрабатывает отступы, концы строк
colorscheme gruvbox            " устанавливаем цветовую схему

set shortmess+=I               " не показывать intro screen
set cursorline                 " подсветка строки в которой находиться курсор
set background=dark            " темная цветовая схема
set matchpairs+={:}            " показывать совпадающие скобки
set t_Co=256                   " больше цветов в терминале
set t_ut=
set showmatch                  " показывать первую первую парную скобку после ввода второй
set laststatus=2
filetype on
filetype plugin indent on
syntax on                      " Включаем подсветку синтаксиса
set clipboard=unnamedplus      " Включаем использование глобального clipboard

"КОДИРОВКИ
" кодировка редактора (терминала) по умолчанию (при создании все файлы приводятся к этой кодировке)
if has("win32")
   set encoding=cp1251
else
   set encoding=utf-8
   set termencoding=utf-8
endif
" формат файла по умолчанию (влияет на окончания строк) - будет перебираться в указанном порядке
set fileformat=unix
" варианты кодировки файла по умолчанию (все файлы по умолчанию сохраняются в этой кодировке)
set fencs=utf-8,cp1251,koi8-r,cp866

" проверка орфографии
set spelllang=en_us,ru
set spell
hi clear SpellBad
hi SpellBad cterm=underline,bold ctermfg=red 

" Поиск
set incsearch  " при поиске перескакивать на найденный текст в процессе набора строки
set hlsearch   " включаем подсветку выражения, которое ищется в тексте
set ignorecase " игнорировать регистр букв при поиске
set smartcase  " перекрываем игнорирование регистра, если в строке есть символы в uppercase

" Табуляция
set tabstop=4     " размер Tab
set shiftwidth=4  " количество пробелов, вставляемых вместо Tab
set expandtab     " замена Tab пробелами
set softtabstop=4 " позволяет удалять Tab как Tab (но реально удаляется n пробелов)
set autoindent    " автоматический отступ
set nowrap        " убираем перенос строк

" Бэкап и своп файлы
set nobackup
set nowritebackup
set noswapfile

" Undo файлы
let s:undodir = expand(s:dotvim . "/.udir")
if !isdirectory(s:undodir)
    call mkdir(s:undodir, 0700)
endif
execute "set undodir=" . s:undodir
set undofile

" Мапим горячие клавиши
let mapleader=","
let maplocalleader=","

" отмена подсветки результатов поиска
nnoremap <silent> <cr> :nohlsearch<cr><cr>
nnoremap <silent> <leader>n :nohlsearch<cr>

" NERDTree
map<F12> :NERDTreeToggle <cr> 

" сохранение файла по F2
nnoremap <f2> :w <cr>
nnoremap <leader>w :w <cr>
inoremap <f2> <c-o>:w<cr>

" работа с глобальным clipboard
inoremap <C-v> <ESC>"+pa
vnoremap <C-c> "+y
vnoremap <C-d> "+d

" перемещение строк Ctrl + Shift + [Up|Down]
nnoremap <C-S-Up> :m-2<CR>
nnoremap <C-S-Down> :m+<CR>
inoremap <C-S-Up> <Esc>:m-2<CR>
inoremap <C-S-Down> <Esc>:m+<CR>

" latex
let g:livepreview_previewer = 'evince'
let g:livepreview_engine = 'xelatex'

" fzf
nnoremap <c-p> :Files<cr>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>l :Lines<cr>
nnoremap <leader>ag :Ag<cr>
" }}}
